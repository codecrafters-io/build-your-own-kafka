@@ -29,37 +29,32 @@
     }

     struct sockaddr_in server_addr{};
     server_addr.sin_family = AF_INET;
     server_addr.sin_addr.s_addr = INADDR_ANY;
     server_addr.sin_port = htons(9092);

     if (bind(server_fd, reinterpret_cast<struct sockaddr*>(&server_addr), sizeof(server_addr)) != 0) {
         close(server_fd);
         std::cerr << "Failed to bind to port 9092" << std::endl;
         return 1;
     }

     int connection_backlog = 5;
     if (listen(server_fd, connection_backlog) != 0) {
         close(server_fd);
         std::cerr << "listen failed" << std::endl;
         return 1;
     }

     std::cout << "Waiting for a client to connect...\n";

     struct sockaddr_in client_addr{};
     socklen_t client_addr_len = sizeof(client_addr);

-    // You can use print statements as follows for debugging, they'll be visible when running tests.
-    std::cerr << "Logs from your program will appear here!\n";
-    
-    // TODO: Uncomment the code below to pass the first stage
-    // 
-    // int client_fd = accept(server_fd, reinterpret_cast<struct sockaddr*>(&client_addr), &client_addr_len);
-    // std::cout << "Client connected\n";
-    // close(client_fd);
+    int client_fd = accept(server_fd, reinterpret_cast<struct sockaddr*>(&client_addr), &client_addr_len);
+    std::cout << "Client connected\n";
+    close(client_fd);

     close(server_fd);
     return 0;
 }
\ No newline at end of file
