slug: "kafka"
name: "Build your own Kafka"
short_name: "Kafka"
release_status: "beta"

description_md: |-
  Apache Kafka is a distributed event streaming platform often used for high-performance data pipelines. In this challenge, you'll build your own Kafka broker
  that's capable of serving basic requests.

  Along the way you'll learn about TCP servers, the Kafka wire protocol and more.

short_description_md: |-
  Learn about TCP servers, the Kafka wire protocol and more.

completion_percentage: 15

languages:
  - slug: "cpp"
  - slug: "csharp"
  - slug: "gleam"
  - slug: "go"
  - slug: "java"
  - slug: "javascript"
  - slug: "python"
  - slug: "rust"
  - slug: "typescript"
  - slug: "zig"

marketing:
  difficulty: medium
  sample_extension_idea_title: "On Disk Storage"
  sample_extension_idea_description: "A Kafka broker that can read and write to disk"
  testimonials:
    - author_name: "Ananthalakshmi Sankar"
      author_description: "Automation Engineer at Apple"
      author_avatar: "https://codecrafters.io/images/external/testimonials/oxta.jpeg"
      link: "https://github.com/anu294"
      text: "There are few sites I like as much that have a step by step guide. The real-time feedback is so good, it's creepy!"

    - author_name: "Patrick Burris"
      author_description: "Senior Software Developer, CenturyLink"
      author_avatar: "https://codecrafters.io/images/external/testimonials/patrick-burris.jpeg"
      link: "https://github.com/Jumballaya"
      text: |-
        I think the instant feedback right there in the git push is really cool.
        Didn't even know that was possible!

extensions:
  - slug: "concurrent-clients"
    name: "Concurrent Clients"
    description_markdown: |
      In this challenge extension you'll add support for serving multiple clients simultaneously.

      Along the way you'll learn about TCP connections, how to handle concurrency and more.

  - slug: "listing-partitions"
    name: "Listing Partitions"
    description_markdown: |
      In this challenge extension you'll add support for listing topic partitions by implementing the [DescribeTopicPartitions][describe-topic-partitions] API.

      Along the way you'll learn about how Kafka stores messages on disk, the `__cluster_metadata` topic and more.

      [describe-topic-partitions]: https://kafka.apache.org/protocol.html#The_Messages_DescribeTopicPartitions

  - slug: "consuming-messages"
    name: "Consuming Messages"
    description_markdown: |
      In this challenge extension you'll add support for consuming messages by implementing the [Fetch][fetch-api] API.

      Along the way you'll learn about how Kafka's Fetch API works, how Kafka stores messages on disk and more.

      [fetch-api]: https://kafka.apache.org/protocol.html#The_Messages_Fetch

  - slug: "producing-messages"
    name: "Producing Messages"
    description_markdown: |
      In this challenge extension you'll add support for producing messages by implementing the [Produce][produce-api] API.

      Along the way you'll learn about how Kafka's Produce API works, how Kafka stores messages on disk and more.

      [produce-api]: https://kafka.apache.org/protocol.html#The_Messages_Produce

  - slug: "creating-topics"
    name: "Creating Topics"
    description_markdown: |
      In this challenge extension you'll add support for creating topics by implementing the [CreateTopics][create-topics-api] API.

      Along the way you'll learn about how Kafka's CreateTopics API works, topic validation, the `__cluster_metadata` topic and more.

      [create-topics-api]: https://kafka.apache.org/protocol.html#The_Messages_CreateTopics

stages:
  - slug: "vi6"
    name: "Bind to a port"
    difficulty: easy
    marketing_md: |-
      In this stage, you'll start a TCP server on port 9092, which is the
      default port that Kafka uses.

  - slug: "nv3"
    name: "Send Correlation ID"
    difficulty: easy
    marketing_md: |-
      In this stage, you'll start implementing the ResponseHeader.

  - slug: "wa6"
    name: "Parse Correlation ID"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll start decoding the RequestHeader.

  - slug: "nc5"
    name: "Parse API Version"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll start encoding your response to the `APIVersions` requests.

  - slug: "pv1"
    name: "Handle APIVersions requests"
    difficulty: hard
    marketing_md: |-
      In this stage, you'll need to implement the `APIVersions:V4` response.

  # Concurrent Requests

  - slug: "nh4"
    name: "Serial requests"
    primary_extension_slug: "concurrent-clients"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll need to handle multiple sequential `APIVersions` requests.

  - slug: "sk0"
    name: "Concurrent requests"
    primary_extension_slug: "concurrent-clients"
    difficulty: hard
    marketing_md: |-
      In this stage, you'll need to handle concurrent `APIVersions` requests.

  # Describe Topic Partitions

  - slug: "yk1"
    primary_extension_slug: "listing-partitions"
    name: "Include DescribeTopicPartitions in APIVersions"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll add the DescribeTopicPartitions API to the APIVersions response.

  - slug: "vt6"
    primary_extension_slug: "listing-partitions"
    name: "List for an unknown topic"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement the DescribeTopicPartition response for an unknown topic.

  - slug: "ea7"
    primary_extension_slug: "listing-partitions"
    name: "List for a single partition"
    difficulty: hard
    marketing_md: |-
      In this stage, you'll implement the DescribeTopicPartition response for a single topic.

  - slug: "ku4"
    primary_extension_slug: "listing-partitions"
    name: "List for multiple partitions"
    difficulty: hard
    marketing_md: |-
      In this stage, you'll implement the DescribeTopicPartition response for a single topic with multiple partitions.

  - slug: "wq2"
    primary_extension_slug: "listing-partitions"
    name: "List for multiple topics"
    difficulty: hard
    marketing_md: |-
      In this stage, you'll implement the DescribeTopicPartition response for multiple topics.

  # Consuming Messages

  - slug: "gs0"
    primary_extension_slug: "consuming-messages"
    name: "Include Fetch in APIVersions"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll add the Fetch API to the APIVersions response.

  - slug: "dh6"
    primary_extension_slug: "consuming-messages"
    name: "Fetch with no topics"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll start encoding your response to the `Fetch` requests.

  - slug: "hn6"
    primary_extension_slug: "consuming-messages"
    name: "Fetch with an unknown topic"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll start encoding your response to the `Fetch` requests.

  - slug: "cm4"
    primary_extension_slug: "consuming-messages"
    name: "Fetch with an empty topic"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement the Fetch response for a topic with no messages.

  - slug: "eg2"
    primary_extension_slug: "consuming-messages"
    name: "Fetch single message from disk"
    difficulty: hard
    marketing_md: |-
      In this stage, you'll implement the Fetch response for a topic with a single message, reading it from disk.

  - slug: "fd8"
    primary_extension_slug: "consuming-messages"
    name: "Fetch multiple messages from disk"
    difficulty: hard
    marketing_md: |-
      In this stage, you'll implement the Fetch response for a topic with multiple messages, reading them from disk.

  # Producing Messages

  - slug: "um3"
    primary_extension_slug: "producing-messages"
    name: "Include Produce in APIVersions"
    difficulty: easy
    marketing_md: |-
      In this stage, you'll add the Produce API to the APIVersions response.

  - slug: "ck2"
    primary_extension_slug: "producing-messages"
    name: "Produce to an invalid topic or partition"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement the Produce response for an invalid topic or partition.

  - slug: "ps7"
    primary_extension_slug: "producing-messages"
    name: "Produce a single record"
    difficulty: hard
    marketing_md: |-
      In this stage, you'll implement successfully producing a single record to disk.

  - slug: "sb8"
    primary_extension_slug: "producing-messages"
    name: "Produce multiple records"
    difficulty: hard
    marketing_md: |-
      In this stage, you'll implement producing multiple records in a single record batch.

  - slug: "mf2"
    primary_extension_slug: "producing-messages"
    name: "Produce to multiple partitions"
    difficulty: hard
    marketing_md: |-
      In this stage, you'll implement producing to multiple partitions of the same topic.

  - slug: "ar4"
    primary_extension_slug: "producing-messages"
    name: "Produce to multiple topics"
    difficulty: hard
    marketing_md: |-
      In this stage, you'll implement producing to multiple topics in a single request.

  # Creating Topics

  - slug: "yb1"
    primary_extension_slug: "creating-topics"
    name: "Include CreateTopics in APIVersions"
    difficulty: easy
    marketing_md: |-
      In this stage, you'll add the CreateTopics API to the APIVersions response.

  - slug: "ve7"
    primary_extension_slug: "creating-topics"
    name: "CreateTopics with Invalid Topic Name"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement the CreateTopics response for invalid topic names.

  - slug: "us2"
    primary_extension_slug: "creating-topics"
    name: "CreateTopics with Existing Topic Name"
    difficulty: hard
    marketing_md: |-
      In this stage, you'll implement the CreateTopics response for existing and reserved topic names.

  - slug: "hh9"
    primary_extension_slug: "creating-topics"
    name: "CreateTopics with Validation Only"
    difficulty: hard
    marketing_md: |-
      In this stage, you'll implement the CreateTopics response for validation-only mode.

  - slug: "rk2"
    primary_extension_slug: "creating-topics"
    name: "CreateTopics with a single topic"
    difficulty: hard
    marketing_md: |-
      In this stage, you'll implement creating a single topic.

  - slug: "fl3"
    primary_extension_slug: "creating-topics"
    name: "CreateTopics with Multiple Topics"
    difficulty: hard
    marketing_md: |-
      In this stage, you'll implement creating multiple topics in a single request.
