slug: "kafka"
name: "Build your own Kafka"
short_name: "Kafka"
release_status: "beta"

description_md: |-
  Apache Kafka is a distributed event streaming platform often used for high-performance data pipelines. In this challenge, you'll build your own Kafka broker
  that's capable of serving basic requests.

  Along the way you'll learn about TCP servers, the Kafka wire protocol and more.

short_description_md: |-
  Learn about TCP servers, the Kafka wire protocol and more.

completion_percentage: 15

languages:
  - slug: "gleam"
  - slug: "go"
  - slug: "javascript"
  - slug: "python"
  - slug: "rust"

marketing:
  difficulty: medium
  sample_extension_idea_title: "On Disk Storage"
  sample_extension_idea_description: "A Kafka broker that can read and write to disk"
  testimonials:
    - author_name: "Ananthalakshmi Sankar"
      author_description: "Automation Engineer at Apple"
      author_avatar: "https://codecrafters.io/images/external/testimonials/oxta.jpeg"
      link: "https://github.com/anu294"
      text: "There are few sites I like as much that have a step by step guide. The real-time feedback is so good, it's creepy!"

    - author_name: "Patrick Burris"
      author_description: "Senior Software Developer, CenturyLink"
      author_avatar: "https://codecrafters.io/images/external/testimonials/patrick-burris.jpeg"
      link: "https://github.com/Jumballaya"
      text: |-
        I think the instant feedback right there in the git push is really cool.
        Didn't even know that was possible!

extensions:
  - slug: "concurrent-clients"
    name: "Concurrent Clients"
    description_markdown: |
      In this challenge extension you'll add support for serving multiple clients simultaneously.

      Along the way you'll learn about TCP connections, how to handle concurrency and more.

  - slug: "listing-partitions"
    name: "Listing Partitions"
    description_markdown: |
      In this challenge extension you'll add support for listing topic partitions by implementing the [DescribeTopicPartitions][describe-topic-partitions] API.

      Along the way you'll learn about how Kafka stores cluster metadata on disk, how to read topic metadata from disk and more.

      [describe-topic-partitions]: https://kafka.apache.org/protocol.html#The_Messages_DescribeTopicPartitions

  - slug: "consuming-messages"
    name: "Consuming Messages"
    description_markdown: |
      In this challenge extension you'll add support for consuming messages by implementing the [Fetch][fetch-api] API.

      Along the way you'll learn about how Kafka's Fetch API works, how Kafka stores messages on disk and more.

      [fetch-api]: https://kafka.apache.org/protocol.html#The_Messages_Fetch

stages:
  - slug: "vi6"
    name: "Bind to a port"
    difficulty: easy
    description_md: |-
      In this stage, you'll implement a TCP server that listens on port 9092.

      [TCP](https://en.wikipedia.org/wiki/Transmission_Control_Protocol) is the underlying protocol that Kafka brokers and clients use to communicate with each other.

      ### Tests

      The tester will execute your program like this:
      ```
      $ ./your_program.sh
      ```

      It'll then try to connect to your TCP server on port 9092. If the connection succeeds, you'll pass this stage.

      ### Notes

      - If you already have a Kafka broker running on port 9092 and you run your program, you'll get a "port already in use" error. To fix this, terminate the existing Kafka broker and run your program again.
      - 9092 is the default port that Kafka uses.
    marketing_md: |-
      In this stage, you'll start a TCP server on port 9092, which is the
      default port that Kafka uses.

  - slug: "nv3"
    name: "Send Correlation ID"
    difficulty: easy
    description_md: |-
      In this stage, you'll respond to a request with a hardcoded correlation ID.

      ### Kafka wire protocol

      The [Kafka wire protocol](https://kafka.apache.org/protocol.html) is a binary protocol used by Kafka brokers and clients to communicate with each other.

      All communication over this protocol happens in request-response pairs. A client sends a request to the broker, and the broker responds with a response.

      You'll implement support for this protocol over the next few stages. We'll break down the protocol into smaller pieces and implement them one by one.

      ### Kafka requests

      Examples of some commonly used Kafka requests:

      - `APIVersions`, used to get the supported API versions by the broker
      - `Fetch`, used to get data from the broker
      - `Produce`, used to send data to the broker

      We'll learn about these in detail later, for now we'll focus on the protocol format itself.

      ### Request/Response format

      As described in [the docs](https://kafka.apache.org/protocol.html#protocol_common), each request and response in the Kafka wire protocol starts with 4 bytes that
      describe the length of the entire message (this includes the header & body), followed by the message. This is true for both requests and responses.

      The first 4 bytes are encoded as an int32 (4 bytes, big-endian / network byte order).

      For example, if the length of the message is 10, the first 4 bytes (in hexadecimal) will be `00 00 00 0a` (`0a` is the hexadecimal representation of 10).

      ### Response header format (v0)

      Each response to a Kafka request contains a header and a body. The header format is the same for most responses (irrespective of request type), but it does vary specifically
      for the `APIVersions` response. The `APIVersions` response uses the "v0" header format, while all other responses use the "v1" header format.

      The response header format (v0) is 4 bytes long, and contains exactly one field:

      - `correlation_id`: An integer that uniquely identifies the request (the client sends this value in the request)
        - This is an "INT32" according to the Kafka wire protocol
        - It is a signed integer, encoded using 4 bytes in the response (big-endian / network byte order)

      The response header format (v1) contains an additional `tag_buffer` field, which we'll cover in later stages.

      As mentioned in the previous section, the header is preceded by 4 bytes that describe the length of the entire message (header and body combined).

      ### Response body format

      The response body format varies by request type. We'll cover this in later stages.

      ### Tests

      The tester will execute your program like this:

      ```bash
      $ ./your_program.sh
      ```

      It'll then connect to your server on port 9092 and send a `APIVersions` request. You don't need to implement the logic to parse this request yet.

      The tester will wait to receive a response from your server. It will expect at least 8 bytes of data (4 bytes for the message length + 4 bytes for the correlation ID).

      The tester won't validate the first 4 bytes of your response (the "message length") in this stage. The tester will assert that the next 4 bytes are `00 00 00 07` (7, encoded
      as a 4 byte integer in big-endian).

      ### Notes

      - In this stage, you're expected to hardcode the correlation ID as `7` in your response. We'll get to reading this value from the request in later stages.
      - Since the response format is currently incomplete, the first 4 bytes of your response (the "message length") will not be validated in this stage. We'll get to this in later stages.
      - You don't need to parse the request in this stage. We'll get to this in later stages.
    marketing_md: |-
      In this stage, you'll start implementing the ResponseHeader.

  - slug: "wa6"
    name: "Parse Correlation ID"
    difficulty: medium
    description_md: |-
      In this stage, you'll parse the correlation ID from a request and send a response with the same correlation ID.

      ### Request header format

      In the previous stage, we saw that the request starts with a 4 byte length field, followed by the request header, and then the request body.

      The format of the request header is as follows:

      | Field Name            | Field Type      | Description                               |
      |-----------------------|-----------------|-------------------------------------------|
      | `request_api_key`     | INT16           | The API key for the request               |
      | `request_api_version` | INT16           | The version of the API for the request    |
      | `correlation_id`      | INT32           | A unique identifier for the request       |
      | `client_id`           | NULLABLE_STRING | The client ID for the request             |
      | `tagged_fields`       | TAGGED_FIELDS   | Optional tagged fields                    |

      The documentation for this can be found [here](https://kafka.apache.org/protocol.html#protocol_messages) under the "Request Header v2" section.

      - `request_api_key`: An integer identifying the request type.
        - The value of this field is different for each type of request.
        - For example, the `APIVersions` request has a `request_api_key` of `18`.
        - A full list of API keys can be found in [the docs](https://kafka.apache.org/protocol.html#protocol_api_keys).
      - `request_api_version`: The version of the API to use for the request.
        - For example, the `APIVersions` request supports multiple versions: 0, 1, 2, 3 and 4.
      - `correlation_id`: A unique identifier for the request.
        - This value is echo-ed back in the response.
        - (This is the value you hardcoded in the previous stage!)
      - `client_id`: A string identifying the client that sent the request.
      - `tagged_fields`: Optional tagged fields
        - This can be ignored for now, they're [optional tagged fields](https://cwiki.apache.org/confluence/display/KAFKA/KIP-482%3A+The+Kafka+Protocol+should+Support+Optional+Tagged+Fields) used to introduce additional features over time.
        - The value for this will always be a null byte in this challenge (i.e. no tagged fields are present)

      In this stage, you'll only need to parse the `correlation_id` field from the request. You can ignore the other fields for now.

      ### Tests

      The tester will execute your program like this:

      ```bash
      $ ./your_program.sh
      ```

      It'll then connect to your server on port 9092 and send a `APIVersions` (v4) request. The tester will include a random
      correlation ID in this request.

      The tester will wait for your program to respond and it'll then validate that the correlation ID in the response header matches the correlation ID it sent in the request header.

      Just like the previous stage, the tester won't validate the first 4 bytes of your response (the "message length") in this stage.

      ### Notes

      - You can remove the hardcoded correlation ID of `7` we used in the previous stage. You'll now need to read this value from the request.
      - Since the response format is currently incomplete, the first 4 bytes of your response (the "message length") will not be validated in this stage. We'll get to this in later stages.
      - You don't need to parse all fields in the request in this stage, just the `correlation_id` field. We'll get to the other fields in later stages.
    marketing_md: |-
      In this stage, you'll start decoding the RequestHeader.

  - slug: "nc5"
    name: "Parse API Version"
    difficulty: medium
    description_md: |-
      In this stage, you'll parse the `api_version` field from a request and respond with an error if the version is unsupported.

      🚧 **We're still working on instructions for this stage**. You can find notes on how the tester works below.

      In the meantime, please use
      [this link](https://forum.codecrafters.io/new-topic?category=Challenges&tags=challenge%3Akafka&title=Question+about+nc5%3A+Parse+API+Version&body=%3Cyour+question+here%3E)
      to ask questions on the forum.

      ### Tests

      The tester will execute your program like this:

      ```bash
      $ ./your_program.sh
      ```

      It'll then connect to your server on port 9092 and send a `APIVersions` request. This request will include an invalid `APIVersion` (Examples: `-1` or `1234`).

      Any version other than 0, 1, 2, 3 and 4 should be considered an invalid version.

      Your server should respond with an error code of `35` (UNSUPPORTED_VERSION).

      The tester will validate that:

      - The correlation ID in the response header matches the correlation ID in the request header.
      - The error code in the response body is `35` (UNSUPPORTED_VERSION).

      The tester won't validate the first 4 bytes of your response (the "message length") in this stage. We'll get to this in later stages.

      ### Notes

      - The `APIVersions` request will be sent with an invalid `APIVersion` (Examples: `-1` or `1234`).
    marketing_md: |-
      In this stage, you'll start encoding your response to the `APIVersions` requests.

  - slug: "pv1"
    name: "Handle APIVersions requests"
    difficulty: hard
    description_md: |-
      In this stage, you'll implement the response body for the `APIVersions` request.

      🚧 **We're still working on instructions for this stage**. You can find notes on how the tester works below.

      In the meantime, please use
      [this link](https://forum.codecrafters.io/new-topic?category=Challenges&tags=challenge%3Akafka&title=Question+about+pv1%3A+Handle+APIVersions+requests&body=%3Cyour+question+here%3E)
      to ask questions on the forum.

      ### Tests

      The tester will execute your program like this:

      ```bash
      $ ./your_program.sh
      ```

      It'll then connect to your server on port 9092 and send a valid `APIVersions` (v4) request.

      The tester will validate that:

      - The first 4 bytes of your response (the "message length") are valid.
      - The correlation ID in the response header matches the correlation ID in the request header.
      - The error code in the response body is `0` (No Error).
      - The response body contains at least one entry for the API key `18` (API_VERSIONS).
      - The `MaxVersion` for the `ApiKey` `18` is at least `4`.

      ### Notes

      - The tester will always send you v4 of the APIVersions request.
      - From this stage onwards, the tester will start validating the first 4 bytes of your response (the "message length") in addition to the other checks.
      - If extra bytes are remaining after decoding all the fields of the response body, this will be considered an error.
    marketing_md: |-
      In this stage, you'll need to implement the `APIVersions:V4` response.

  # Concurrent Requests

  - slug: "nh4"
    name: "Serial requests"
    primary_extension_slug: "concurrent-clients"
    difficulty: medium
    description_md: |-
      In this stage, you'll add support for handling multiple sequential requests from the same client.

      ### Tests

      The tester will execute your program like this:

      ```bash
      $ ./your_program.sh
      ```

      It'll then connect to your server on port 9092 and send a `APIVersions` (v4) request, read the response, & validate the response.

      Once a response is received, the tester will re-use the same connection to send multiple other `APIVersions` (v4) requests.

      For each response, the tester will validate that:

      - The first 4 bytes of your response (the "message length") are valid.
      - The correlation ID in the response header matches the correlation ID in the request header.
      - The error code in the response body is `0` (No Error).
      - The response body contains at least one entry for the API key `18` (API_VERSIONS).
      - The `MaxVersion` for the `ApiKey` `18` is at least `4`.

      ### Notes

      - The tester will only send APIVersions (v4) requests in this stage.
      - If extra bytes are remaining after decoding all the fields of the response body, this will be considered an error.
    marketing_md: |-
      In this stage, you'll need to handle multiple sequential `APIVersions` requests.

  - slug: "sk0"
    name: "Concurrent requests"
    primary_extension_slug: "concurrent-clients"
    difficulty: hard
    description_md: |-
      In this stage, you'll add support for handling concurrent requests from multiple clients.

      ### Tests

      The tester will execute your program like this:

      ```bash
      $ ./your_program.sh
      ```

      It'll then instantiate 2-3 clients. Each of these clients will connect to your server on port 9092 and send multiple `APIVersions` (v4) requests.

      For each response, the tester will validate that:

      - The first 4 bytes of your response (the "message length") are valid.
      - The correlation ID in the response header matches the correlation ID in the request header.
      - The error code in the response body is `0` (No Error).
      - The response body contains at least one entry for the API key `18` (API_VERSIONS).
      - The `MaxVersion` for the `ApiKey` `18` is atleast `4`.

      ### Notes

      - The tester will only send APIVersions (v4) requests in this stage.
      - If extra bytes are remaining after decoding all the fields of the response body, this will be considered an error.
    marketing_md: |-
      In this stage, you'll need to handle concurrent `APIVersions` requests.

  # Describe Topic Partitions

  - slug: "yk1"
    primary_extension_slug: "listing-partitions"
    name: "Include DescribeTopicPartitions in APIVersions"
    difficulty: medium
    description_md: |-
      In this stage, you'll add an entry for the `DescribeTopicPartitions` API to the APIVersions response.

      🚧 **We're still working on instructions for this stage**. You can find notes on how the tester works below.

      In the meantime, please use
      [this link](https://forum.codecrafters.io/new-topic?category=Challenges&tags=challenge%3Akafka&title=Question+about+yk1%3A+Include+DescribeTopicPartitions+in+APIVersions&body=%3Cyour+question+here%3E)
      to ask questions on the forum.

      ### Tests

      The tester will execute your program like this:

      ```bash
      $ ./your_program.sh /tmp/server.properties
      ```

      It'll then connect to your server on port 9092 and send a valid `APIVersions` (v4) request.

      The tester will validate that:

      - The first 4 bytes of your response (the "message length") are valid.
      - The correlation ID in the response header matches the correlation ID in the request header.
      - The error code in the response body is `0` (No Error).
      - The response body contains at least three entries of APIKeyResponses.
      - The response for the API key `18` (API_VERSIONS) has a `MaxVersion` of at least 4, and a `MinVersion` of at least 0.
      - The response for the API key `75` (DESCRIBE_TOPIC_PARTITION) has a `MaxVersion` of at least 0, and a `MinVersion` of at least 0.

      ### Notes

      - You don't have to implement support for the `DescribeTopicPartitions` request in this stage. We'll get to this in later stages.
      - You'll still need to include the entry for `APIVersions` in your response to pass the previous stage.
      - The `MaxVersion` for the `DescribeTopicPartitions` and `APIVersions` are different. For `APIVersions`, it is 4. For `DescribeTopicPartitions`, it is 0.
    marketing_md: |-
      In this stage, you'll add the DescribeTopicPartitions API to the APIVersions response.

  - slug: "vt6"
    primary_extension_slug: "listing-partitions"
    name: "List for an unknown topic"
    difficulty: medium
    description_md: |-
      In this stage, you'll implement the `DescribeTopicPartition` response for an unknown topic.

      🚧 **We're still working on instructions for this stage**. You can find notes on how the tester works below.

      In the meantime, please use
      [this link](https://forum.codecrafters.io/new-topic?category=Challenges&tags=challenge%3Akafka&title=Question+about+vt6%3A+List+for+an+unknown+topic&body=%3Cyour+question+here%3E)
      to ask questions on the forum.

      ### Tests

      The tester will execute your program like this:

      ```bash
      $ ./your_program.sh /tmp/server.properties
      ```

      It'll then connect to your server on port 9092 and send a `DescribeTopicPartition` (v0) request. The request will contain a single topic which 1 partition.

      The tester will validate that:

      - The first 4 bytes of your response (the "message length") are valid.
      - The correlation ID in the response header matches the correlation ID in the request header.
      - The error code in the response body is `3` (UNKNOWN_TOPIC_OR_PARTITION).
      - The response body should be valid DescribeTopicPartitionResponse.
      - The `topic_name` field in the response should be equal to the topic name sent in the request.
      - The `topic_id` field in the response should be equal to `00000000-0000-0000-0000-000000000000`.
      - The partition response should be empty. (As there are no partitions assigned to this non-existent topic.)

      ### Notes

      - You'll need to parse the `DescribeTopicPartition` request in this stage to get the topic name to send in the response.
      - The official docs for the `DescribeTopicPartition` request can be found [here](https://kafka.apache.org/protocol.html#The_Messages_DescribeTopicPartition).

    marketing_md: |-
      In this stage, you'll implement the DescribeTopicPartition response for an unknown topic.

  - slug: "ea7"
    primary_extension_slug: "listing-partitions"
    name: "List for a single partition"
    difficulty: hard
    description_md: |-
      In this stage, you'll implement the `DescribeTopicPartition` response for a single topic.

      🚧 **We're still working on instructions for this stage**. You can find notes on how the tester works below.

      In the meantime, please use
      [this link](https://forum.codecrafters.io/new-topic?category=Challenges&tags=challenge%3Akafka&title=Question+about+ea7%3A+List+for+a+single+partition&body=%3Cyour+question+here%3E)
      to ask questions on the forum.

      ### Tests

      The tester will execute your program like this:

      ```bash
      $ ./your_program.sh /tmp/server.properties
      ```

      It'll then connect to your server on port 9092 and send a `DescribeTopicPartition` (v0) request. The request will contain an single topic name. The topic exists and has a single partition assigned to it.

      The tester will validate that:

      - The first 4 bytes of your response (the "message length") are valid.
      - The correlation ID in the response header matches the correlation ID in the request header.
      - The error code in the response body is `0` (NO_ERROR).
      - The response body should be valid DescribeTopicPartitionResponse.
      - The `topic_name` field in the response should be equal to the topic name sent in the request.
      - The `topic_id` field in the response should be equal to the topic UUID of the topic.
      - The partition response should contain details of the partition assigned to the topic.
      - The error code in the partition response should be `0` (NO_ERROR).
      - The `partition_index` field in the partition response should be equal to the partition ID of the partition assigned to the topic.

      ### Notes

      - You'll need to parse the `DescribeTopicPartition` request in this stage to get the topic name to send in the response.
      - The official docs for the `DescribeTopicPartition` request can be found [here](https://kafka.apache.org/protocol.html#The_Messages_DescribeTopicPartition).

    marketing_md: |-
      In this stage, you'll implement the DescribeTopicPartition response for a single topic.

  - slug: "ku4"
    primary_extension_slug: "listing-partitions"
    name: "List for multiple partitions"
    difficulty: hard
    description_md: |-
      In this stage, you'll implement the `DescribeTopicPartition` response for a single topic with multiple partitions.

      🚧 **We're still working on instructions for this stage**. You can find notes on how the tester works below.

      In the meantime, please use
      [this link](https://forum.codecrafters.io/new-topic?category=Challenges&tags=challenge%3Akafka&title=Question+about+KU4+%28DescribeTopicPartition+with+single+topic+but+multiple+partitions%29&body=%3Cyour+question+here%3E)
      to ask questions on the forum.

      ### Tests

      The tester will execute your program like this:

      ```bash
      $ ./your_program.sh /tmp/server.properties
      ```

      It'll then connect to your server on port 9092 and send a `DescribeTopicPartition` (v0) request. The request will contain an single topic name. The topic exists and has 2 partitions assigned to it.

      The tester will validate that:

      - The first 4 bytes of your response (the "message length") are valid.
      - The correlation ID in the response header matches the correlation ID in the request header.
      - The error code in the response body is `0` (NO_ERROR).
      - The response body should be valid DescribeTopicPartitionResponse.
      - The `topic_name` field in the response should be equal to the topic name sent in the request.
      - The `topic_id` field in the response should be equal to the topic UUID of the topic.
      - The partition response should contain details of the 2 partitions assigned to the topic.
      - There should be 2 partition responses.
      - The error code in both the partition responses should be `0` (NO_ERROR).
      - The `partition_index` field in both the partition responses should be equal to the partition ID of the partition assigned to the topic.

      ### Notes

      - You'll need to parse the `DescribeTopicPartition` request in this stage to get the topic name to send in the response.
      - The official docs for the `DescribeTopicPartition` request can be found [here](https://kafka.apache.org/protocol.html#The_Messages_DescribeTopicPartition).

    marketing_md: |-
      In this stage, you'll implement the DescribeTopicPartition response for a single topic with multiple partitions.

  - slug: "wq2"
    primary_extension_slug: "listing-partitions"
    name: "List for multiple topics"
    difficulty: hard
    description_md: |-
      In this stage, you'll implement the `DescribeTopicPartition` response for multiple topics.

      🚧 **We're still working on instructions for this stage**. You can find notes on how the tester works below.

      In the meantime, please use
      [this link](https://forum.codecrafters.io/new-topic?category=Challenges&tags=challenge%3Akafka&title=Question+about+WQ2+%28DescribeTopicPartition+with+multiple+topics%29&body=%3Cyour+question+here%3E)
      to ask questions on the forum.

      ### Tests

      The tester will execute your program like this:

      ```bash
      $ ./your_program.sh /tmp/server.properties
      ```

      It'll then connect to your server on port 9092 and send a `DescribeTopicPartition` (v0) request. The request will contain 3 topic names. The topics exist and have 1 or 2 partitions assigned to each.

      The tester will validate that:

      - The first 4 bytes of your response (the "message length") are valid.
      - The correlation ID in the response header matches the correlation ID in the request header.
      - The error code in the topic response body is `0` (NO_ERROR).
      - The `topic_name` field in the topic response should be equal to the topic name sent in the request.
      - The `topic_id` field in the topic response should be equal to the topic UUID of the topic.
      - The partition response should contain details of the partitions assigned to the topic.
      - The error code in all the partition responses should be `0` (NO_ERROR).
      - The `partition_index` field in all the partition responses should be equal to the partition ID of the partition assigned to the topic.

      ### Notes

      - You'll need to parse the `DescribeTopicPartition` request in this stage to get the topic name to send in the response.
      - The official docs for the `DescribeTopicPartition` request can be found [here](https://kafka.apache.org/protocol.html#The_Messages_DescribeTopicPartition).

    marketing_md: |-
      In this stage, you'll implement the DescribeTopicPartition response for multiple topics.

  # Consuming Messages

  - slug: "gs0"
    primary_extension_slug: "consuming-messages"
    name: "Include Fetch in APIVersions"
    difficulty: medium
    description_md: |-
      In this stage, you'll add an entry for the `Fetch` API to the APIVersions response.

      🚧 **We're still working on instructions for this stage**. You can find notes on how the tester works below.

      In the meantime, please use
      [this link](https://forum.codecrafters.io/new-topic?category=Challenges&tags=challenge%3Akafka&title=Question+about+gs0%3A+Include+Fetch+in+APIVersions&body=%3Cyour+question+here%3E)
      to ask questions on the forum.

      ### Tests

      The tester will execute your program like this:

      ```bash
      $ ./your_program.sh
      ```

      It'll then connect to your server on port 9092 and send a valid `APIVersions` (v4) request.

      The tester will validate that:

      - The first 4 bytes of your response (the "message length") are valid.
      - The correlation ID in the response header matches the correlation ID in the request header.
      - The error code in the response body is `0` (No Error).
      - The response body contains at least one entry for the API key `1` (FETCH).
      - The `MaxVersion` for the Fetch API is atleast 16.

      ### Notes

      - You don't have to implement support for the `Fetch` request in this stage. We'll get to this in later stages.
      - You'll still need to include the entry for `APIVersions` in your response to pass the previous stage.
      - The `MaxVersion` for the `Fetch` and `APIVersions` are different. For `APIVersions`, it is 4. For `Fetch`, it is 16.
    marketing_md: |-
      In this stage, you'll add the Fetch API to the APIVersions response.

  - slug: "dh6"
    primary_extension_slug: "consuming-messages"
    name: "Fetch with no topics"
    difficulty: medium
    description_md: |-
      In this stage, you'll implement the Fetch response for a Fetch request with no topics.

      🚧 **We're still working on instructions for this stage**. You can find notes on how the tester works below.

      In the meantime, please use
      [this link](https://forum.codecrafters.io/new-topic?category=Challenges&tags=challenge%3Akafka&title=Question+about+dh6%3A+Fetch+with+no+topics&body=%3Cyour+question+here%3E)
      to ask questions on the forum.

      ### Tests

      The tester will execute your program like this:

      ```bash
      $ ./your_program.sh
      ```

      It'll then connect to your server on port 9092 and send a `Fetch` (v16) request. The request will contain an empty array of topics.

      The tester will validate that:

      - The first 4 bytes of your response (the "message length") are valid.
      - The correlation ID in the response header matches the correlation ID in the request header.
      - The error code in the response body is `0` (No Error).
      - The `throttle_time_ms` field in the response is present (any value is accepted).
      - The `session_id` field in the response is `0`.
      - The `responses` field in the response has 0 elements (since the request had an empty array of topics).

      <!--
      ```
      0000   00 00 00 11 5e 33 46 cc 00 00 00 00 00 00 00 0a   ....^3F.........
      0010   b9 c1 2e 01 00                                    .....
      ```
      -->

      ### Notes

      - You don't need to parse the fields in the `Fetch` request in this stage, we'll get to this in later stages.
      - The official docs for the `Fetch` request can be found [here](https://kafka.apache.org/protocol.html#The_Messages_Fetch). Make sure
        to scroll down to the "Fetch Response (Version: 16)" section.
    marketing_md: |-
      In this stage, you'll start encoding your response to the `Fetch` requests.

  - slug: "hn6"
    primary_extension_slug: "consuming-messages"
    name: "Fetch with an unknown topic"
    difficulty: medium
    description_md: |-
      In this stage, you'll implement the Fetch response for an unknown topic.

      🚧 **We're still working on instructions for this stage**. You can find notes on how the tester works below.

      In the meantime, please use
      [this link](https://forum.codecrafters.io/new-topic?category=Challenges&tags=challenge%3Akafka&title=Question+about+hn6%3A+Fetch+with+an+unknown+topic&body=%3Cyour+question+here%3E)
      to ask questions on the forum.

      ### Tests

      The tester will execute your program like this:

      ```bash
      $ ./your_program.sh
      ```

      It'll then connect to your server on port 9092 and send a `Fetch` (v16) request. This request will contain a single topic with an unknown topic ID (i.e. the topic doesn't exist yet).

      The tester will validate that:

      - The first 4 bytes of your response (the "message length") are valid.
      - The correlation ID in the response header matches the correlation ID in the request header.
      - The error code in the response body is `0` (No Error).
      - The `throttle_time_ms` field in the response is present (any value is accepted).
      - The `session_id` field in the response is `0`.
      - The `responses` field in the response has 1 element, and in that element:
        - The `topic_id` field matches what was sent in the request.
        - The `partitions` array has 1 element, and in that element:
          - The `partition_index` field is `0`.
          - The `error_code` field is `100` (UNKNOWN_TOPIC).

      ### Notes

      - You'll need to parse the `Fetch` request in this stage to get the `topic_id` to send in the response.
      - The official docs for the `Fetch` request can be found [here](https://kafka.apache.org/protocol.html#The_Messages_Fetch). Make sure
        to scroll down to the "Fetch Response (Version: 16)" section.
    marketing_md: |-
      In this stage, you'll start encoding your response to the `Fetch` requests.

  - slug: "cm4"
    primary_extension_slug: "consuming-messages"
    name: "Fetch with an empty topic"
    difficulty: hard
    description_md: |-
      🚧 **We're still working on tests for this stage!**.
    marketing_md: |-
      In this stage, you'll implement the Fetch response for a topic with multiple messages.

  - slug: "eg2"
    primary_extension_slug: "consuming-messages"
    name: "Fetch single message from disk"
    difficulty: hard
    description_md: |-
      🚧 **We're still working on tests for this stage!**.
    marketing_md: |-
      In this stage, you'll implement the Fetch response for a topic with a single message, reading it from disk.

  - slug: "fd8"
    primary_extension_slug: "consuming-messages"
    name: "Fetch multiple messages from disk"
    difficulty: hard
    description_md: |-
      🚧 **We're still working on tests for this stage!**.
    marketing_md: |-
      In this stage, you'll implement the Fetch response for a topic with multiple messages, reading them from disk.
